import os
from typing import List, Optional, Any, Dict

import requests
from langchain.callbacks.manager import CallbackManagerForLLMRun
from langchain.llms.ai21 import AI21
from pydantic import SecretStr


class AI21ContextualAnswers(AI21):
    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        pass

    @property
    def _default_params(self) -> Dict[str, Any]:
        """Get the default parameters for calling AI21 API."""
        return {
            "temperature": self.temperature,
            "maxTokens": self.maxTokens,
            "minTokens": self.minTokens,
            "topP": self.topP,
            "presencePenalty": self.presencePenalty.dict(),
            "countPenalty": self.countPenalty.dict(),
            "frequencyPenalty": self.frequencyPenalty.dict(),
            "numResults": self.numResults,
            "logitBias": self.logitBias,
        }

    @property
    def _identifying_params(self) -> Dict[str, Any]:
        """Get the identifying parameters."""
        return {**{"model": self.model}, **self._default_params}

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "ai21"

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """Call out to AI21's complete endpoint.

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = ai21("Tell me a joke.")
        """
        if self.stop is not None and stop is not None:
            raise ValueError("`stop` found in both the input and default params.")
        elif self.stop is not None:
            stop = self.stop
        elif stop is None:
            stop = []
        if self.base_url is not None:
            base_url = self.base_url
        else:
            if self.model in ("answer",):
                answer_api_url = "https://api.ai21.com/studio/v1/answer"
            else:
                raise ValueError("Can ONLY USE 'answer' model")
        params = {**self._default_params, **kwargs}
        self.ai21_api_key = SecretStr(os.environ["AI21_API_KEY"])
        context = kwargs["context"] if "context" in kwargs else "No context"
        response = requests.post(
            url=answer_api_url,
            headers={"Authorization": f"Bearer {self.ai21_api_key.get_secret_value()}"},
            json={
                "question": prompt,
                "context": context,
                "stopSequences": stop,
                **params,
            },
        )
        if response.status_code != 200:
            optional_detail = response.json().get("error")
            raise ValueError(
                f"AI21 /complete call failed with status code {response.status_code}."
                f" Details: {optional_detail}"
            )
        response_json = response.json()
        if response_json["answerInContext"]:
            return response_json["answer"]
        else:
            return "answer not in context"
